/*
=========================================================================

                        WinSenderNDI.cpp

				Using ofxNDI (http://spout.zeal.co/)

   A Windows Desktop Application project generated by Visual Studio
   and adapted for NDI output (https://www.ndi.tv/)

   This is an example using the ofxNDIsend class independent of Openframeworks.
   Captures the window using Windows bitmap functions and sends a pixel buffer.

   Five functions are used : SetFrameRate, SetFormat, CreateSender, SendImage and UpdateSender
   See : "STEP 1" - "STEP 5"

   Other functions are optional.

   Compare with the Spout DirectX Windows example.

=========================================================================

                 Copyright(C) 2024 Lynn Jarvis.

This program is free software : you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.If not, see < http://www.gnu.org/licenses/>.
========================================================================

*/
#include "framework.h"
#include "WinSenderNDI.h"

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                       // current instance
WCHAR szTitle[MAX_LOADSTRING]{};       // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING]{}; // the main window class name

ofxNDIsend sender;                      // Sender object
HWND g_hWnd = NULL;                     // Window handle
HBITMAP g_hBitmap = NULL;               // Image bitmap for sending
unsigned int g_BitmapWidth = 0;         // Image bitmap width
unsigned int g_BitmapHeight = 0;        // Image bitmap height
unsigned char* g_pixelBuffer = nullptr; // Sending pixel buffer
unsigned int g_SenderWidth = 0;         // Sender width
unsigned int g_SenderHeight = 0;        // Sender height
double g_SenderFps = 0.0;               // Sender fps - see SetAsync below
bool bInitialized = false;              // Sender is initialized

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);
void ReleaseNDIsender();
void Render();


int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

 	
	// For debugging
	// Console window so printf works
	/*
	FILE* pCout; // should really be freed on exit
	AllocConsole();
	freopen_s(&pCout, "CONOUT$", "w", stdout);
	// Disable console close button to prevent accidental shutdown
	HMENU hmenu = GetSystemMenu(GetConsoleWindow(), FALSE);
	EnableMenuItem(hmenu, SC_CLOSE, MF_GRAYED);
	printf("WinSenderNDI\n");
	*/

	// Load a bitmap from file
	g_hBitmap = (HBITMAP)LoadImageA(NULL, "data/koala-on-tree.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
	if (!g_hBitmap) {
		MessageBoxA(NULL, "Failed to load image", "WinSenderNDI", MB_OK);
		return FALSE;
	}

	// Get the size of the bitmap
	BITMAP bmpImage;
	GetObjectA(g_hBitmap, sizeof(BITMAP), &bmpImage);
	g_BitmapWidth = bmpImage.bmWidth;
	g_BitmapHeight = bmpImage.bmHeight;

    // Initialize global strings
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_WIN_NDI, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Perform application initialization:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

	// Create a sending buffer initially the size of the loaded bitmap
	// It is resized as necessary - see WM_PAINT
	g_SenderWidth  = g_BitmapWidth;
	g_SenderHeight = g_BitmapHeight;
	unsigned int buffersize = g_SenderWidth * g_SenderHeight * 4;
	g_pixelBuffer = new unsigned char[buffersize];

	// Option : set the framerate
	// NDI sending will clock the application at the set frame rate 
	// The application cycle will also be clocked at that rate
	//
	// Can be set as a whole number, e.g. 60, 30, 25 etc
	// sender.SetFrameRate(30);
	//
	// Or as a decimal number e.g. 29.97
	// sender.SetFrameRate(29.97);
	//
	// Or as a fraction numerator and denominator
	// as specified by the NDI SDK - e.g. 
	// NTSC 1080 : 30000, 1001 for 29.97 fps
	// NTSC  720 : 60000, 1001 for 59.94fps
	// PAL  1080 : 30000, 1200 for 25fps
	// PAL   720 : 60000, 1200 for 50fps
	// sender.SetFrameRate(30000, 1001);
	//

	// =======================================
	// STEP 1
	// Set the sender frame rate
	// For this example set the rate to 30fps
	// The render rate is then clocked to 30 fps as well
	// unless asynchronous sending is selected as below
	g_SenderFps  = 30.0;
	sender.SetFrameRate(g_SenderFps);

	// Option : set NDI asynchronous sending
	// If enabled, render should be controlled to the same rate as the sender
	// See "HoldFps(30)" in render
	// sender.SetAsync();


	// Option : set the output format (video data type)
	// The default output format is RGBA (NDIlib_FourCC_video_type_RGBA)
	// It may also be specified as BGRA (NDIlib_FourCC_video_type_BGRA)
	// or YUV (NDIlib_FourCC_video_type_UYVY)
	// The sending data has to be converted to match.
	//
	// YUV data (NDIlib_FourCC_video_type_UYVY) is more efficient for NDI.
	// With OpenGL, shaders can be used for data conversion. But in this example,
	// conversion must be done using the CPU and the speed penalty can be higher
	// than using RGBA/BGRA.
	//

	// =======================================
	// STEP 2
	// Windows screen capture is BGRA. Set a matching format.
	sender.SetFormat(NDIlib_FourCC_video_type_BGRA);

	// =======================================
	// STEP 3
	// Create a named sender
	bInitialized = sender.CreateSender("Windows NDI Sender", g_SenderWidth, g_SenderHeight);

	// Main message loop:
	MSG msg = { 0 };
	while (WM_QUIT != msg.message)
	{
		if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		// Continue if a message is received
		Render();
	}

	if (g_hBitmap)
		DeleteObject(g_hBitmap);

	if (g_pixelBuffer)
		delete[] g_pixelBuffer;

	// Release the sender
	sender.ReleaseSender();

    return (int) msg.wParam;
}


void Render()
{
	// Trigger a re-paint to draw the bitmap and refresh the sending pixel buffer - see WM_PAINT
	InvalidateRect(g_hWnd, NULL, FALSE);
	UpdateWindow(g_hWnd); // Update immediately

	//
	// Windows screen capture produces alpha 0 for the whole image.
	// Some applications, such as NDI Studio Monitor, display the received
	// image as black so alpha of all the pixels should be converted to 255. 
	// See also : http://www.winprog.org/tutorial/transparency.html
	// Tests show that the following consumes
	// 0.6 msec at 1280x720 and 1.5 msec at 1920x1080
	//
	unsigned char* pixels = g_pixelBuffer;
	for (int i = 0; i < (int)(g_SenderHeight*g_SenderWidth); i++) {
		*(pixels + 3) = 255; // alpha is the last of the 4 bytes - set from 0 to 255
		pixels += 4; // move the pointer along to the next rgba pixel
	}

	// =======================================
	// STEP 4
	// Send the pixels
	// Windows bitmap is BGRA. See SetFormat above.
	sender.SendImage(g_pixelBuffer, g_SenderWidth, g_SenderHeight);

	if (sender.GetAsync()) { // See SetAsync above
		// For asynchronous sending, hold a target frame rate.
		// In this example, rendering is done during idle time
		// and render rate can be extremely high.
		// HoldFps is integer precision so it is best to set 
		// the sender frame rate to a whole number as well
		// such as 30 fps.
		ofxNDIutils::HoldFps((int)g_SenderFps);
	}

} // end Render



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN_NDI));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground  = CreateHatchBrush(HS_DIAGCROSS, RGB(192, 192, 192));
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_WIN_NDI);
    wcex.lpszClassName  = szWindowClass;
	wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_WIN_NDI));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Store instance handle in our global variable

   // Create window
   RECT rc = { 0, 0, 640, 360 }; // Desired client size
   AdjustWindowRect(&rc, WS_OVERLAPPEDWINDOW, TRUE); // Allow for menu
   HWND hWnd = CreateWindowW(szWindowClass,
	   szTitle,
	   WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_THICKFRAME,
	   CW_USEDEFAULT, CW_USEDEFAULT, rc.right - rc.left, rc.bottom - rc.top, nullptr, nullptr, hInstance,
	   nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   // Centre the window on the desktop work area
   GetWindowRect(hWnd, &rc);
   RECT WorkArea;
   int WindowPosLeft = 0;
   int WindowPosTop = 0;
   SystemParametersInfo(SPI_GETWORKAREA, 0, (LPVOID)&WorkArea, 0);
   WindowPosLeft += ((WorkArea.right  - WorkArea.left) - (rc.right - rc.left)) / 2;
   WindowPosTop  += ((WorkArea.bottom - WorkArea.top)  - (rc.bottom - rc.top)) / 2;
   MoveWindow(hWnd, WindowPosLeft, WindowPosTop, (rc.right - rc.left), (rc.bottom - rc.top), false);

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   // Set the global window handle
   g_hWnd = hWnd;
   
   return TRUE;
}



// Release sender and resources
void ReleaseNDIsender()
{
	if (!bInitialized)
		return;

	// Release NDI sender
	sender.ReleaseSender();
	// Free the sending buffer
	if (g_pixelBuffer) free((void*)g_pixelBuffer);
	g_pixelBuffer = nullptr;
	g_SenderWidth = 0;
	g_SenderHeight = 0;
	// Keep the sender name
	bInitialized = false;

}


//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE: Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
		case WM_COMMAND:
		{
			int wmId = LOWORD(wParam);
			// Parse the menu selections:
			switch (wmId)
			{
				case IDM_ABOUT:
					DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
					break;
				case IDM_EXIT:
					DestroyWindow(hWnd);
					break;
				default:
					return DefWindowProc(hWnd, message, wParam, lParam);
			}
		}
		break;

    case WM_PAINT:
        {
			if (IsIconic(hWnd))
				break;

			PAINTSTRUCT ps;
			HDC hdc = BeginPaint(g_hWnd, &ps);

			// For this example, draw an image, capture the client area
			// and copy pixel data to the sending buffer.

			//
			// Display the bitmap
			//

			// Get the client area
			RECT rcClient;
			GetClientRect(hWnd, &rcClient);
			UINT rcWidth = (rcClient.right - rcClient.left);
			UINT rcHeight = (rcClient.bottom - rcClient.top);

			// Create a compatible memory DC and select the loaded image bitmap into it
			HDC hdcMemDC = CreateCompatibleDC(hdc);
			SelectObject(hdcMemDC, g_hBitmap);

			// Stretch blit the bitmap to the client area
			SetStretchBltMode(hdc, COLORONCOLOR); // Fastest method
			StretchBlt(hdc,	0, 0,
						rcWidth, rcHeight, // client size
						hdcMemDC, 0, 0,
						g_BitmapWidth, g_BitmapHeight, // image size
						SRCCOPY);

			//
			// Capture the client area for sending
			//
	
			// Create a compatible bitmap sized to the client area
			HBITMAP hBitmap = CreateCompatibleBitmap(hdcMemDC, rcWidth, rcHeight);

			// Select the bitmap into the memory DC
			HBITMAP hOldBitmap = (HBITMAP)SelectObject(hdcMemDC, hBitmap);

			// Blit the client screen into it
			BitBlt(hdcMemDC, 0, 0,
				   rcClient.right - rcClient.left,
				   rcClient.bottom - rcClient.top,
				   hdc, 0, 0, SRCCOPY);

			// ============================================================
			// STEP 5
			// The window is re-sizable so check for client area size change
			if (rcWidth != g_SenderWidth || rcHeight != g_SenderHeight) {
				// Update the sender dimensions
				g_SenderWidth = rcWidth;
				g_SenderHeight = rcHeight;
				// Re-size the the sending buffer to match
				if (g_pixelBuffer) delete[] g_pixelBuffer;
				unsigned int buffersize = g_SenderWidth * g_SenderHeight * 4;
				g_pixelBuffer = new unsigned char[buffersize];
				sender.UpdateSender(g_SenderWidth, g_SenderHeight);
			}
			// Now the sender is the same size as the client area

			// Copy to the sending buffer
			GetBitmapBits(hBitmap, rcWidth*rcHeight*4, (LPVOID)g_pixelBuffer);

			// Clean up
			SelectObject(hdcMemDC, hOldBitmap);
			DeleteObject(hBitmap);
			DeleteDC(hdcMemDC);
		
			EndPaint(hWnd, &ps);
        }
        break;

	case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hWnd, message, wParam, lParam);

    }
    return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
 	UNREFERENCED_PARAMETER(lParam);
	char tmp[MAX_PATH]{};
	char about[1024]{};
	LPDRAWITEMSTRUCT lpdis{};
	HWND hwnd = NULL;
	HCURSOR cursorHand = NULL;

    switch (message)
    {
    case WM_INITDIALOG:

		sprintf_s(about, 256, "              WinSenderNDI");
		strcat_s(about, 1024, "\n\n\n\n");
		strcat_s(about, 1024, "    Windows NDI sender example.\n");
		strcat_s(about, 1024, "       Send a pixel buffer using\n          the ofxNDIsend class.");
		SetDlgItemTextA(hDlg, IDC_ABOUT_TEXT, (LPCSTR)about);
		
		//
		// Url hyperlink hand cursor
		//

		// Spout 
		cursorHand = LoadCursor(NULL, IDC_HAND);
		hwnd = GetDlgItem(hDlg, IDC_SPOUT_URL);
		SetClassLongPtrA(hwnd, GCLP_HCURSOR, (LONG_PTR)cursorHand);

		// NDI
		hwnd = GetDlgItem(hDlg, IDC_NDI_URL);
		SetClassLongPtr(hwnd, GCLP_HCURSOR, (LONG_PTR)cursorHand);

        return (INT_PTR)TRUE;

	case WM_DRAWITEM:

		// The blue hyperlinks
		lpdis = (LPDRAWITEMSTRUCT)lParam;
		if (lpdis->itemID == -1) break;
		SetTextColor(lpdis->hDC, RGB(6, 69, 173));
		switch (lpdis->CtlID) {
			case IDC_SPOUT_URL:
				DrawTextA(lpdis->hDC, "https://spout.zeal.co", -1, &lpdis->rcItem, DT_LEFT);
				break;
			case IDC_NDI_URL:
				DrawTextA(lpdis->hDC, " https://www.ndi.tv", -1, &lpdis->rcItem, DT_LEFT);
				break;
			default:
				break;
		}
		break;

    case WM_COMMAND:

		if (LOWORD(wParam) == IDC_SPOUT_URL) {
			// Open the Spout website url
			sprintf_s(tmp, MAX_PATH, "http://spout.zeal.co");
			ShellExecuteA(hDlg, "open", tmp, NULL, NULL, SW_SHOWNORMAL);
			EndDialog(hDlg, 0);
			return (INT_PTR)TRUE;
		}

		if (LOWORD(wParam) == IDC_NDI_URL) {
			// Open the NDI website url
			sprintf_s(tmp, MAX_PATH, "https://www.ndi.tv/");
			ShellExecuteA(hDlg, "open", tmp, NULL, NULL, SW_SHOWNORMAL);
			EndDialog(hDlg, 0);
			return (INT_PTR)TRUE;
		}

        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

// That's all..